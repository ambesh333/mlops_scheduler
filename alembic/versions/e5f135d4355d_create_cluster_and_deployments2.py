"""create cluster and deployments2

Revision ID: e5f135d4355d
Revises: eefdb4f5b339
Create Date: 2025-05-18 14:52:24.265937

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e5f135d4355d'
down_revision: Union[str, None] = 'eefdb4f5b339'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clusters',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('total_cpu', sa.Float(), nullable=False),
    sa.Column('total_ram', sa.Integer(), nullable=False),
    sa.Column('total_gpu', sa.Integer(), nullable=False),
    sa.Column('available_cpu', sa.Float(), nullable=False),
    sa.Column('available_ram', sa.Integer(), nullable=False),
    sa.Column('available_gpu', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('available_cpu >= 0 AND available_cpu <= total_cpu', name='ck_cluster_cpu'),
    sa.CheckConstraint('available_gpu >= 0 AND available_gpu <= total_gpu', name='ck_cluster_gpu'),
    sa.CheckConstraint('available_ram >= 0 AND available_ram <= total_ram', name='ck_cluster_ram'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='uq_owner_cluster_name')
    )
    op.create_index('ix_clusters_owner_id', 'clusters', ['owner_id'], unique=False)
    op.create_table('deployments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('cluster_id', sa.Integer(), nullable=False),
    sa.Column('image', sa.String(length=255), nullable=False),
    sa.Column('required_cpu', sa.Float(), nullable=False),
    sa.Column('required_ram', sa.Integer(), nullable=False),
    sa.Column('required_gpu', sa.Integer(), nullable=False),
    sa.Column('priority', sa.Enum('HIGH', 'LOW', name='priority_level'), nullable=False),
    sa.Column('status', sa.Enum('QUEUED', 'RUNNING', 'COMPLETED', 'FAILED', name='deployment_status'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.CheckConstraint('required_cpu >= 0', name='ck_req_cpu_nonneg'),
    sa.CheckConstraint('required_gpu >= 0', name='ck_req_gpu_nonneg'),
    sa.CheckConstraint('required_ram >= 0', name='ck_req_ram_nonneg'),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_deploy_cluster_id', 'deployments', ['cluster_id'], unique=False)
    op.create_index('ix_deploy_owner_id', 'deployments', ['owner_id'], unique=False)
    op.create_index('ix_deploy_status', 'deployments', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_deploy_status', table_name='deployments')
    op.drop_index('ix_deploy_owner_id', table_name='deployments')
    op.drop_index('ix_deploy_cluster_id', table_name='deployments')
    op.drop_table('deployments')
    op.drop_index('ix_clusters_owner_id', table_name='clusters')
    op.drop_table('clusters')
    # ### end Alembic commands ###
